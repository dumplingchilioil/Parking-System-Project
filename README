#include <iostream>
#include <fstream>
using namespace std;

#define SIZE 5 // Fixed-size array for parking slots

// Base class: Vehicle
class Vehicle {
public:
    string registrationNumber;
    string ownerName;

    Vehicle(string regNum, string owner) : registrationNumber(regNum), ownerName(owner) {}
    virtual void displayDetails() {
        cout << "Registration Number: " << registrationNumber << endl << "Owner: " << ownerName << endl;
    }
    virtual ~Vehicle() {}
};

// Derived classes
class Car : public Vehicle {
public:
    Car(string regNum, string owner) : Vehicle(regNum, owner) {}
    void displayDetails() override {
        cout << "[ CAR ] ";
        Vehicle::displayDetails();
        cout << endl;
    }
};

class Bike : public Vehicle {
public:
    Bike(string regNum, string owner) : Vehicle(regNum, owner) {}
    void displayDetails() override {
        cout << "[ BIKE ] ";
        Vehicle::displayDetails();
        cout << endl;
    }
};

// ParkingSlot class
class ParkingSlot {
private:
    int slotNumber;
    bool isOccupied;  // true = ada , false = takde
    Vehicle* vehicle;
public:
    ParkingSlot() : slotNumber(0), isOccupied(false), vehicle(NULL) {}
    void setSlotNumber(int num) { slotNumber = num; }
    void assignSlot(Vehicle* v) {
        if (!isOccupied) {
            vehicle = v;
            isOccupied = true;
            cout << "Vehicle parked in slot " << slotNumber << endl;
            cout << endl;
        } else {
            cout << "Slot already occupied!" << endl;
        }
    }
    void freeSlot() { // delete vehicle 
        if (isOccupied) {
            delete vehicle;
            vehicle = NULL;
            isOccupied = false;
            cout << "Slot " << slotNumber << " is now free." << endl;
        }
    }
    void displaySlot() {
        if (isOccupied) {
            vehicle->displayDetails();
        } else {
            cout << "Slot " << slotNumber << " is empty." << endl;
            cout << endl;
        }
    }
    friend class ParkingLot; // Friend function access
};

// ParkingLot class
class ParkingLot {
    ParkingSlot slots[SIZE];
public:
    ParkingLot() {
        for (int i = 0; i < SIZE; ++i) {
            slots[i].setSlotNumber(i + 1);
        }
    }
    void parkVehicle(int slotNum, Vehicle* v) {
        if (slotNum > 0 && slotNum <= SIZE) {
            slots[slotNum - 1].assignSlot(v);
        } else {
            cout << "Invalid slot number!" << endl;
        }
    }
    void removeVehicle(int slotNum) {
        if (slotNum > 0 && slotNum <= SIZE) {
            slots[slotNum - 1].freeSlot();
        } else {
            cout << "Invalid slot number!" << endl;
        }
    }
    
	int availableSlots() {
    int count = 0;
    for (int i = 0; i < SIZE; ++i) {
        if (!slots[i].isOccupied) {
            count++;
        }
    }
    return count;
}

    void displayStatus() {
        for (int i = 0; i < SIZE; ++i) {
            slots[i].displaySlot();
        }
    }
    void saveToFile() {
        ofstream file("parking_data.txt");
        for (int i = 0; i < SIZE; ++i) {
            if (slots[i].isOccupied) {
                file << slots[i].slotNumber << " " << slots[i].vehicle->registrationNumber << " " << slots[i].vehicle->ownerName << endl;
            }
        }
        file.close();
    }
};

int main() {
    ParkingLot lot;
    int choice, slotNum;
    string regNum, owner, type;

    do {
        cout << "\n--- Parking System Menu ---\n";
        cout << "1. Park Vehicle\n";
        cout << "2. Remove Vehicle\n";
        cout << "3. Display Parking Lot Status\n";
        cout << "4. Save Data to File\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter vehicle type (car/bike): ";
                cin >> type;
                cout << "Enter Registration Number: ";
                cin >> regNum;
                cout << "Enter Owner Name: ";
                cin >> owner;
                cout << "Enter Slot Number (1 to " << SIZE << "): ";
                cin >> slotNum;

                if (type == "car" || type == "Car") {
                    lot.parkVehicle(slotNum, new Car(regNum, owner));
                } else if (type == "bike" || type == "Bike") {
                    lot.parkVehicle(slotNum, new Bike(regNum, owner));
                } else {
                    cout << "Invalid vehicle type!" << endl;
                }
                cout << "Available parking slots: " << lot.availableSlots() << "/" << SIZE << endl;
                lot.displayStatus();
				break;

            case 2:
                cout << "Enter Slot Number to free: ";
                cin >> slotNum;
                lot.removeVehicle(slotNum);
                break;

            case 3:
            	 lot.displayStatus();
            	cout << "Available parking slots: " << lot.availableSlots() << "/" << SIZE << endl;
                break;

            case 4:
                lot.saveToFile();
                cout << "Parking data saved to file.\n";
                break;

            case 5:
                cout << "Exiting the system.\n";
                break;

            default:
                cout << "Invalid choice! Try again.\n";
        }

    } while (choice != 5);

    return 0;
}

